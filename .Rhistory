as.numeric('NULL')
eval('NULL')
test=1:463
r=c(2,20,40)
which(test %in% r)
column=rep(1,length(test))
column[!which(test %in% r)]=0
which(column==0)
column
test %in% r
column[which(!(test %in% r))]=0
supply=seq(8,25, 0.2)
policy1=rnorm(supply, mean = 1100, sd=100)
policy2=rnorm(supply, mean=1050, sd=50)
plot(x=supply, y=sort(policy1), type="l", color='black')
plot(x=supply, y=sort(policy1), type="l", col='black')
supply=seq(0,1, 0.05)
x=seq(0,1, 0.05)
policy1=rnorm(x, mean = 0.5, sd=.1)
policy2=rnorm(x, mean=0.5, sd=.5)
plot(x=x, y=sort(policy1), type="l", col='black')
lines(x=x, y=sort(policy2), col="lightgray")
policy1=dnorm(x, mean = 0.5, sd=.1)
policy2=dnorm(x, mean=0.5, sd=.5)
plot(x=x, y=sort(policy1), type="l", col='black')
lines(x=x, y=sort(policy2), col="lightgray")
x=seq(0,1, 0.05)
policy1=dnorm(x, mean = 0.5, sd=.1)
policy2=dnorm(x, mean=0.5, sd=.5)
plot(x=x, y=sort(policy1), type="l", col='black')
lines(x=x, y=sort(policy2), col="lightgray")
plot(x=x, y=(policy1), type="l", col='black')
x=seq(0,1, 0.02)
policy1=dnorm(x, mean = 0.5, sd=.1)
policy2=dnorm(x, mean=0.5, sd=.5)
plot(x=x, y=(policy1), type="l", col='black')
policy1=dnorm(x, mean = 0.5, sd=.05)
policy2=dnorm(x, mean=0.5, sd=.5)
plot(x=x, y=(policy1), type="l", col='black')
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.05)
policy2=dnorm(x, mean=0.5, sd=.5)
plot(x=x, y=(policy1), type="l", col='black')
lines(x=x, y=(policy2), col="lightgray")
policy2=dnorm(x, mean=0.5, sd=.2)
plot(x=x, y=(policy1), type="l", col='black')
lines(x=x, y=(policy2), col="lightgray")
policy2=dnorm(x, mean=0.5, sd=.1)
plot(x=x, y=(policy1), type="l", col='black')
lines(x=x, y=(policy2), col="lightgray")
plot(x=x, y=(policy1), type="l", col='black', lwd=2)
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2))
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), border = NULL)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), border = NULL)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
plot(x=x, y=(policy1), type="l", col='black', lwd=2)
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n", yaxt="n")
plot(x=x, y=(policy1), type="l", col='black', lwd=2)
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n")
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n")
?par
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
policy1=dnorm(x, mean = 0.5, sd=.08)
policy2=dnorm(x, mean=0.5, sd=.1)
par()
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
policy2=dt(x, mean=0.5, sd=.1)
policy2=dnorm(x, mean=0.5, sd=.2)+1
par()
policy1=dnorm(x, mean = 0.5, sd=.08)
policy2=dnorm(x, mean=0.5, sd=.2)+1
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
policy2=dnorm(x, mean=0.5, sd=.1.5)+1
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
policy1=dnorm(x, mean = 0.5, sd=.08)
policy2=dnorm(x, mean=0.5, sd=.15)+1.5
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
par(mar=c(0.5,0.5,1,1))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.08)
policy2=dnorm(x, mean=0.5, sd=.15)+1.5
par(mar=c(2,2,2,,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="uncertain model parameter", ylab="policy performance")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter")
mtext(side=1, text="uncertain model parameter"m line=1)
mtext(side=1, text="uncertain model parameter"m line=1)
mtext(side=1, text="uncertain model parameter"m line=1.5)
mtext(side=1, text="uncertain model parameter", line=1.5)
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=1, text="policy performance", line=.5)
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.08)
policy2=dnorm(x, mean=0.5, sd=.15)+1.5
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=2, text="policy performance", line=.5)
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.08)
policy2=dnorm(x, mean=0.5, sd=.2)+1.5
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=2, text="policy performance", line=.5)
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.05)
policy2=dnorm(x, mean=0.5, sd=.2)+1.5
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=2, text="policy performance", line=.5)
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.05)
policy2=dnorm(x, mean=0.5, sd=.2)+3
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=2, text="policy performance", line=.5)
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.05)
policy2=dnorm(x, mean=0.5, sd=.2)+3
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=2, text="policy performance", line=.5)
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.05)
policy2=dnorm(x, mean=0.5, sd=.2)+3
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=2, text="policy performance", line=.5)
x=seq(8, 25, 0.01)
policy1=x^4-3*x^2
x=seq(8, 25, 0.01)
policy1=x^4-3*x^2
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
x=seq(8, 25, 0.01)
policy1=x^4-3*x^3
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
x=seq(8, 25, 0.01)
policy1=x^4-100*x^3
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
x=seq(-100, 100, 1)
policy1=x^4-100*x^3
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
x=seq(0,1, 0.005)
policy1=dnorm(x, mean = 0.5, sd=.05)
policy2=dnorm(x, mean=0.5, sd=.2)+3
par(mar=c(2,2,2,2))
plot(x=x, y=(policy1), type="l", col='black', lwd=2, yaxt="n", xaxt="n", xlab="", ylab="")
lines(x=x, y=(policy2), col="lightgray", lwd=2)
legend("topright", legend=c("policy 1", "policy 2"), col=c("black", "lightgray"), lwd=c(2,2), bty="n")
mtext(side=1, text="uncertain model parameter", line=.5)
mtext(side=2, text="maximization objective", line=.5)
library(knitr)
library(flexdashboard)
library(dplyr)
library(plotly) # one method for par coords.
library(shiny)
library(shinyWidgets)
library(stringr)
library(gdata) #startsWith
library(nsga2R)
library(DT) # for sortable data table
library(openxlsx)
library(prospectr) # for Kennard Stone sampling
library(shinyBS) # for tooltips
library(schoolmath) # is.even
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
if (interactive()) {
ui <- fluidPage(
sidebarPanel(
selectInput("plotType", "Plot Type",
c(Scatter = "scatter", Histogram = "hist")
),
# Only show this panel if the plot type is a histogram
conditionalPanel(
condition = "input.plotType == 'hist'",
selectInput(
"breaks", "Breaks",
c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
),
# Only show this panel if Custom is selected
conditionalPanel(
condition = "input.breaks == 'custom'",
sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
)
)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output) {
x <- rnorm(100)
y <- rnorm(100)
output$plot <- renderPlot({
if (input$plotType == "scatter") {
plot(x, y)
} else {
breaks <- input$breaks
if (breaks == "custom") {
breaks <- input$breakCount
}
hist(x, breaks = breaks)
}
})
}
shinyApp(ui, server)
}
install.packages("shinydashboard")
library(shinydashboard)
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
filename="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/absolutePanel example.Rmd"
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
includeCSS("styles.css")
####### Commands to render Flexdashboard HTML
# V5 is what you presented to Reclamation on 3/17/21
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
####### Commands to render Flexdashboard HTML
# V5 is what you presented to Reclamation on 3/17/21
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
####### Commands to render Flexdashboard HTML
# V5 is what you presented to Reclamation on 3/17/21
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
####### Commands to render Flexdashboard HTML
# V5 is what you presented to Reclamation on 3/17/21
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
####### Commands to render Flexdashboard HTML
# V5 is what you presented to Reclamation on 3/17/21
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
options(shiny.error=browser)
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
options(shiny.error=NULL)
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
####### Commands to render Flexdashboard HTML
# V5 is what you presented to Reclamation on 3/17/21
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
####### Commands to render Flexdashboard HTML
# V5 is what you presented to Reclamation on 3/17/21
setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies V5/CRB-Robustness-App-BOR')
filename='Web app.Rmd'
#what you are developing for Journal article
# setwd('G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/scripts/Interactive dashboards/Robustness App All policies for Journal Article/Robustness-App-4Journal')
# filename='Par Coords and Stacked Histograms.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
